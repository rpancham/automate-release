name: Pull from Upstream and Cherry-pick Patches

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Select Upstream Repository'
        required: true
        type: choice
        options:
          - 'openvino_model_server'
          - 'kserve'
          - 'modelmesh'
          - 'caikit-tgis-serving'
          - 'openvino'
          - 'vllm'
          - 'caikit-nlp'
          - 'caikit'
          - 'odh-model-controller'
          - 'caikit-tgis-backend'
          - 'caikit-nlp-client'
          - 'model-registry'
      upstream_branch:
        description: 'Upstream branch to pull from'
        required: true
      target_branch:
        description: 'Target branch to pull into'
        required: true
      patch_commits:
        description: 'Comma-separated list of commit SHAs to cherry-pick'
        required: true

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  pull_and_cherry_pick:
    runs-on: ubuntu-latest
    outputs: 
        upstream_repo: ${{ steps.set-repo.outputs.upstream_org_repo }}
        midstream_repo: ${{ steps.set-repo.outputs.midstream_org_repo }}
    env:
      BASE_UPSTREAM_URL: https://github.com/opendatahub-io/
      # BASE_TARGET_URL: https://github.com/red-hat-data-services/
      BASE_TARGET_URL: https://github.com/rpancham/
  

    steps:
    - name: Set repository
      id: set-repo
      run: |
        echo "upstream_org_repo=opendatahub-io/${{ github.event.inputs.upstream_repo }}" >> $GITHUB_OUTPUT
        echo "midstream_org_repo=rpancham/${{ github.event.inputs.upstream_repo }}" >> $GITHUB_OUTPUT

    - name: Configure Git & install hub
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.set-repo.outputs.midstream_org_repo }}
        token: ${{ secrets.SYNC_UPSTREAM_TOKEN }}

  
    - name: Add upstream repository & create cherry pick branch
      run: |

        if git merge-base --is-ancestor ${{ github.event.inputs.patch_commits }} origin/${{ github.event.inputs.target_branch }}; then
          echo "Commit already exists in the target branch."
          exit 1
        fi

        git remote add upstream ${{ env.BASE_UPSTREAM_URL }}${{ github.event.inputs.upstream_repo }}.git
        git fetch upstream
        git checkout -b cherry-pick-${{ github.event.inputs.patch_commits }}

    - name: Cherry-pick commits

      run: |
        commits="${{ github.event.inputs.patch_commits }}"

         IFS=',' read -ra commit_array <<< "$commits"
          for commit in "${commit_array[@]}"; do
            if git show --no-patch --format=%P $commit | grep -q ' '; then
              echo "Cherry-picking merge commit $commit"
              git cherry-pick -m 1 "$commit" || (git cherry-pick --abort && exit 1)
            else
              echo "Cherry-picking regular commit $commit"
              git cherry-pick "$commit" || (git cherry-pick --abort && exit 1)
            fi
          done

    - name: Push changes to cherry pick branch & Create a PR
      run: |
        git log -n 1 --pretty=format:"%H - %s"
        git push -f origin cherry-pick-${{ github.event.inputs.patch_commits }}
        gh pr create --repo ${{ steps.set-repo.outputs.midstream_org_repo }} \
          --head cherry-pick-${{ github.event.inputs.patch_commits }} \
          --base ${{ github.event.inputs.target_branch }} \
          --title "Cherry-pick of commits ${{ github.event.inputs.patch_commits }} into ${{ github.event.inputs.target_branch }}" \
          --body "$(echo -e "This is a auto genrated PR, Creating from odh-automation-serving\nCherry-pick of commits ${{ github.event.inputs.patch_commits }} into ${{ github.event.inputs.target_branch }}")"
      env:
        GITHUB_TOKEN: ${{ secrets.SYNC_UPSTREAM_TOKEN }}

       
