name: Pull Upstream and Remove Merged Downstream Patches

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: 'Select Upstream Repository'
        required: true
        type: choice
        options:
          - 'openvinotoolkit/model_server'
          - 'kserve/kserve'
          - 'kserve/modelmesh'
          - 'caikit-tgis-serving'
          - 'openvinotoolkit/openvino'
          - 'vllm-project/vllm'
          - 'caikit/caikit-nlp'
          - 'caikit/caikit'
          - 'odh-model-controller'
          - 'caikit/caikit-tgis-backend'
          - 'caikit-nlp-client'
          - 'kubeflow/model-registry'
      sync_repo:
        description: 'Select Repository to Sync'
        required: true
        type: choice
        options:
          - 'Upstream->Midstream(opendatahub-io)'
          - 'Midstream(opendatahub-io)->Downstream(red-hat-data-services)'
      source_branch:
        description: 'Source branch to pull from'
        required: true
      target_branch:
        description: 'Target branch to pull into'
        required: true
      commit_sha:
        description: 'The merge commit SHA to delete'
        required: true
      action_type:
        description: 'Specify if the changes should be pushed directly or through a pull request'
        required: true
        default: 'pr'
        type: choice
        options:
          - 'pr'
          - 'push'
permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  pull_and_clean:
    runs-on: ubuntu-latest
    outputs: 
        target_repo: ${{ steps.set-repo.outputs.target_org_repo }}
    steps:
      - name: Set repository
        id: set-repo
        run: |
          if [[ "${{ github.event.inputs.upstream_repo }}" == *"/"* ]]; then
            IFS='/' read -r upstreamOwner repoName <<< "${{ github.event.inputs.upstream_repo }}"
          else
            repoName=${{ github.event.inputs.upstream_repo }}
            upstreamOwner=""
          fi
          
          if [[ "$repoName" == "model_server" ]]; then
            repoName=""openvino_"$repoName"
          fi
          
          if [ -n "$upstreamOwner" ] && [[ "${{ github.event.inputs.sync_repo }}" == "Upstream->Midstream(opendatahub-io)" ]]; then
            echo "upstream_org_repo=${{ github.event.inputs.upstream_repo }}"  >> $GITHUB_OUTPUT
            # echo "target_org_repo=opendatahub-io/$repoName" >> $GITHUB_OUTPUT
            echo "target_org_repo=rpancham/$repoName" >> $GITHUB_OUTPUT
          else
            echo "upstream_org_repo=opendatahub-io/$repoName"  >> $GITHUB_OUTPUT
            # echo "target_org_repo=red-hat-data-services/$repoName" >> $GITHUB_OUTPUT
            echo "target_org_repo=rpancham/$repoName" >> $GITHUB_OUTPUT
          fi
      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
      - name: sync
        uses: TobKed/github-forks-sync-action@master
        with:
          github_token: ${{ secrets.sync_upstream_token}}
          upstream_repository: ${{ steps.set-repo.outputs.upstream_org_repo }}
          target_repository: ${{ steps.set-repo.outputs.target_org_repo }}
          upstream_branch: ${{ github.event.inputs.source_branch }}
          target_branch: ${{ github.event.inputs.target_branch }}
          force: false
          tags: false
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.set-repo.outputs.target_org_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.SYNC_UPSTREAM_TOKEN }}
          fetch-depth: 0

      - name: Revert the merge commit
        run: |
          if [ "${{ github.event.inputs.action_type }}" = "pr" ]; then
            git checkout -b revert-merge-${{ github.event.inputs.commit_sha }}
          fi

          # Revert the specified merge commit
          patch_commits="${{ github.event.inputs.commit_sha }}"
          IFS=',' read -ra commits <<< "$patch_commits"
          for commit in "${commits[@]}"; do
            echo "Reverting commit: $commit"
            if git show -s --pretty=%P $commit | grep -q ' '; then
              git revert -m 1 $commit --no-edit || { echo "Failed to revert merge commit $commit"; exit 1; }
            else
              git revert $commit --no-edit || { echo "Failed to revert commit $commit"; exit 1; }
            fi
          done
          
      - name: Push changes
        run: |
          if [ "${{ github.event.inputs.action_type }}" = "push" ]; then
            git push -f origin ${{ github.event.inputs.target_branch }}
          else
            # Push the new branch with the revert commits
            git push -f origin revert-merge-${{ github.event.inputs.commit_sha }}
          fi
      - name: Create Pull Request to apply the reverts
        if: ${{ github.event.inputs.action_type == 'pr' }}
        run: |
          gh pr create --repo ${{ steps.set-repo.outputs.target_org_repo }} \
          --head revert-merge-${{ github.event.inputs.commit_sha }} \
          --base ${{ github.event.inputs.target_branch }} \
          --title "Revert specified merge commits" \
          --body "$(echo -e "This is an autogenerated PR, Creating from odh-automation-serving\nThis PR reverts the specified merge commits ${{ github.event.inputs.commit_sha }} from the branch ${{ github.event.inputs.target_branch }}")"
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_UPSTREAM_TOKEN }}
